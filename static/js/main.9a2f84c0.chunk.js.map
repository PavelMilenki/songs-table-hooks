{"version":3,"sources":["App.module.css","api/api.js","redux/songsReducer.js","components/TableBody.js","components/Table.js","components/Option.js","components/Select.js","components/Selects.js","components/Pagination.js","components/Main.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","api","get","SET_SONGS","SET_CURRENT_SONGS","SET_PAGE","initialState","songs","currentSongs","totalCount","page","pageCount","setSongs","type","getSongs","dispatch","a","data","console","log","TableBody","year","country","artist","song","Table","sortByUP","sortByDown","tableElements","className","s","songsTable","icon","UP","onClick","ARTIST","DOWN","SONG","COUNTRY","YEAR","Option","option","value","selected","Select","title","getSelectorsValues","onChange","options","map","key","Math","random","select","Selects","onChangedValue","propertyName","propertiesValues","Set","sort","b","localeCompare","ALL","selects","e","Pagination","getPage","pages","lastPage","ceil","i","push","style","background","filter","p","paginator","Number","currentTarget","Main","useSelector","state","songsPage","useDispatch","useState","setSelected","useEffect","slice","Year","Country","Artist","Song","sortSongParams","songParam","direction","sorteredSongs","reverseSong","reverse","onChanged","str","selectedValue","filteredSongs","setCurrentSongs","container","tableSongs","paginatorContainer","newPage","newPageCount","setPage","reducers","combineReducers","action","length","store","createStore","applyMiddleware","thunkMiddleware","window","App","app","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a2f84c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__35IJV\",\"container\":\"App_container__1Giib\",\"tableSongs\":\"App_tableSongs__VeANF\",\"songsTable\":\"App_songsTable__1iTOy\",\"icon\":\"App_icon__hoVI9\",\"selects\":\"App_selects__tukGF\",\"select\":\"App_select__1idpY\",\"paginatorContainer\":\"App_paginatorContainer__3dH_k\",\"paginator\":\"App_paginator__1-sm5\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://raw.githubusercontent.com/PavelMilenki/songs-table-hooks/master/src/songs.json'\r\n\r\n});\r\n\r\nexport const api ={\r\n    getSongs() {\r\n        return instance.get(\"\")\r\n    },\r\n};","import {api} from \"../api/api\";\r\n\r\nconst SET_SONGS = '/redux/songsReducer/SET_SONGS';\r\nconst SET_CURRENT_SONGS = '/redux/songsReducer/SET_CURRENT_SONGS';\r\nconst SET_PAGE = '/redux/songsReducer/SET_PAGE';\r\n\r\nconst initialState = {\r\n    songs: [],\r\n    currentSongs: [],\r\n    totalCount: 1,\r\n    page: 1,\r\n    pageCount: 5\r\n    };\r\n\r\nexport const songsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_SONGS:\r\n            return {\r\n                ...state,\r\n                songs: action.songs,\r\n                currentSongs: action.songs,\r\n                totalCount: action.songs.length\r\n            };\r\n\r\n        case SET_CURRENT_SONGS:\r\n            return {\r\n                ...state,\r\n                currentSongs: action.songs,\r\n                totalCount: action.songs.length\r\n            };\r\n        case SET_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.page,\r\n                pageCount: action.pageCount,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setSongs = (songs) => {\r\n    return {\r\n        type: SET_SONGS,\r\n        songs\r\n    }\r\n};\r\n\r\nexport const setCurrentSongs = (songs) => {\r\n    return {\r\n        type: SET_CURRENT_SONGS,\r\n        songs\r\n    }\r\n};\r\n\r\nexport const setPage = (page, pageCount) => {\r\n    return {\r\n        type: SET_PAGE,\r\n        page, pageCount\r\n    }\r\n};\r\n\r\nexport const getSongs = () => async (dispatch) => {\r\n    try {\r\n        const data = await api.getSongs();\r\n        dispatch(setSongs(data.data));\r\n    } catch (e) {\r\n        console.log('Message error' + e);\r\n    }\r\n};","import React from \"react\";\r\n\r\n\r\nexport const TableBody = ({year, country, artist, song}) => {\r\n    return (\r\n        <tbody>\r\n        <tr>\r\n            <td>{artist}</td>\r\n            <td>{song}</td>\r\n            <td>{country}</td>\r\n            <td>{year}</td>\r\n        </tr>\r\n        </tbody>\r\n    )\r\n};","import React from \"react\";\r\nimport {Icon} from \"antd\";\r\nimport s from '../App.module.css'\r\nimport {ARTIST, COUNTRY, DOWN, SONG, UP, YEAR} from \"./Main\";\r\n\r\nexport const Table = ({sortByUP, sortByDown, tableElements}) => {\r\n    return (\r\n        <table className={s.songsTable}>\r\n            <thead>\r\n            <tr>\r\n                <th>\r\n                    Artist\r\n                    <Icon className={s.icon} type={UP} onClick={() => (sortByUP(ARTIST))}/>\r\n                    <Icon className={s.icon} type={DOWN} onClick={() => (sortByDown(ARTIST))}/>\r\n                </th>\r\n                <th>Song\r\n                    <Icon className={s.icon} type={UP} onClick={() => (sortByUP(SONG ))}/>\r\n                    <Icon className={s.icon} type={DOWN} onClick={() => (sortByDown(SONG ))}/></th>\r\n                <th>Country\r\n                    <Icon className={s.icon} type={UP} onClick={() => (sortByUP(COUNTRY))}/>\r\n                    <Icon className={s.icon} type={DOWN} onClick={() => (sortByDown(COUNTRY))}/></th>\r\n                <th>Year\r\n                    <Icon className={s.icon} type={UP} onClick={() => (sortByUP(YEAR))}/>\r\n                    <Icon className={s.icon} type={DOWN} onClick={() => (sortByDown(YEAR))}/></th>\r\n            </tr>\r\n            </thead>\r\n            {tableElements}\r\n        </table>\r\n    )\r\n};","import React from \"react\";\r\n\r\nexport const Option = ({option, value, selected}) => {\r\n\r\n    return <option selected={selected} value={value}>{option}</option>\r\n};","import React from \"react\";\r\nimport {Option} from \"./Option\";\r\nimport s from '../App.module.css'\r\n\r\nexport const Select = ({title, getSelectorsValues, selected, onChange}) => {\r\n\r\n    const options = getSelectorsValues.map(s => {\r\n        return (\r\n            <Option option={s}\r\n                    value={s}\r\n                    key={s + Math.random()}/>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <label>{title}</label>\r\n            <select onChange={onChange} className={s.select} value={selected}>\r\n                {options}\r\n            </select>\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport {Select} from \"./Select\";\r\nimport s from '../App.module.css'\r\nimport {ALL, ARTIST, COUNTRY, YEAR} from \"./Main\";\r\n\r\n\r\nexport const Selects = ({selected, songs, onChangedValue}) => {\r\n\r\n    const getSelectorsValues = (propertyName) => {\r\n        let propertiesValues = songs.map(s => s[propertyName]);\r\n        propertiesValues = [...new Set(propertiesValues)];\r\n        propertiesValues = propertiesValues.sort((a, b) => {\r\n            return a.localeCompare(b)\r\n        });\r\n        return [ALL, ...propertiesValues];\r\n    };\r\n\r\n    return (\r\n        <div className={s.selects}>\r\n            <Select title={ARTIST}\r\n                    onChange={(e) => {\r\n                        onChangedValue(ARTIST, e)\r\n                    }}\r\n                    selected={selected}\r\n                    getSelectorsValues={getSelectorsValues(ARTIST)}/>\r\n            <Select title={COUNTRY}\r\n                    onChange={(e) => {\r\n                        onChangedValue(COUNTRY, e)\r\n                    }}\r\n                    selected={selected}\r\n                    getSelectorsValues={getSelectorsValues(COUNTRY)}/>\r\n            <Select title={YEAR}\r\n                    onChange={(e) => {\r\n                        onChangedValue(YEAR, e)\r\n                    }}\r\n                    selected={selected}\r\n                    getSelectorsValues={getSelectorsValues(YEAR)}/>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport s from \"../App.module.css\";\r\n\r\n\r\nexport const Pagination = ({page, pageCount, totalCount, getPage,}) => {\r\n    let pages = [];\r\n    const lastPage = Math.ceil(totalCount / pageCount);\r\n\r\n    for (let i = 1; i <= lastPage; i++) pages.push((\r\n        <button\r\n            key={i}\r\n            style={{background: page === i ? '#1C6EA4' : ''}}\r\n            onClick={() => getPage(i, pageCount)}\r\n        >\r\n            {i}\r\n        </button>\r\n    ));\r\n\r\n    // 1 ... 4 5 (6) 7 8 ... 11\r\n    if ((page + 4) < lastPage) {\r\n        pages[page + 2] = (\r\n            <span key={page + 3}>\r\n                - ... -\r\n            </span>\r\n        );\r\n        pages = pages.filter((p, i) => i < (page + 3) || i === (lastPage - 1));\r\n    }\r\n    if (page > 5) {\r\n        pages[1] = (\r\n            <span key={2}>\r\n                - ... -\r\n            </span>\r\n        );\r\n        pages = pages.filter((p, i) => i < 2 || i > page - 4);\r\n    }\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            <div>\r\n                <select value={pageCount}\r\n                        onChange={e => getPage(page=1, Number(e.currentTarget.value))}>\r\n                    <option value={5}>5</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={25}>25</option>\r\n                    <option value={50}>50</option>\r\n                    <option value={100}>100</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                {pages}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSongs, setCurrentSongs, setPage,  setSongs} from \"../redux/songsReducer\";\r\nimport s from '../App.module.css'\r\nimport {TableBody} from \"./TableBody\";\r\nimport {Table} from \"./Table\";\r\nimport {Selects} from \"./Selects\";\r\nimport {Pagination} from \"./Pagination\";\r\nimport {slice} from \"lodash\";\r\n\r\nexport const ARTIST = \"Artist\";\r\nexport const SONG = \"Song\";\r\nexport const COUNTRY = \"Country\";\r\nexport const YEAR = \"Year\";\r\nexport const ALL = 'ALL';\r\nexport const UP = \"up\";\r\nexport const DOWN = \"down\";\r\n\r\nexport const Main = () => {\r\n\r\n    const {currentSongs, songs, page, pageCount, totalCount} = useSelector((state) => state.songsPage);\r\n    const dispatch = useDispatch();\r\n    const [selected, setSelected] = useState(ALL);\r\n\r\n    useEffect(() => {\r\n        dispatch(getSongs());\r\n    }, [dispatch]);\r\n\r\n    \r\n    const tableElements = slice(currentSongs, [(page - 1) * pageCount], [pageCount * page]).map(s => {\r\n       return <TableBody year={s.Year}\r\n                          country={s.Country}\r\n                          artist={s.Artist}\r\n                          song={s.Song}\r\n                          key={s.Year + Math.random()}/>\r\n    });\r\n\r\n    const sortSongParams = (songParam, direction) => {\r\n        let sorteredSongs = currentSongs.sort((a, b) => {\r\n            return a[songParam].localeCompare(b[songParam])\r\n        });\r\n        if (direction === UP) {\r\n            dispatch(setSongs(sorteredSongs));\r\n        } else if (direction === DOWN) {\r\n            let reverseSong = sorteredSongs.reverse();\r\n            dispatch(setSongs(reverseSong));\r\n        }\r\n    };\r\n\r\n    const sortByUP = (sort) => {\r\n        sortSongParams(sort, UP);\r\n    };\r\n\r\n    const sortByDown = (sort) => {\r\n        sortSongParams(sort, DOWN);\r\n    };\r\n\r\n    const onChanged = (str, selectedValue) => {\r\n        let filteredSongs = songs.filter((value) => {\r\n            return value[str] === selectedValue\r\n        });\r\n        if (selectedValue === ALL) {\r\n            setSelected(ALL);\r\n            dispatch(getSongs());\r\n        } else {\r\n            setSelected(selectedValue);\r\n            dispatch(setCurrentSongs(filteredSongs));\r\n        }\r\n    };\r\n\r\n    const onChangedValue = (str, e) => {\r\n        onChanged(str, e.currentTarget.value);\r\n    };\r\n\r\n    const getPage = (newPage, newPageCount) => {\r\n        dispatch(setPage(newPage, newPageCount));\r\n    };\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.tableSongs}>\r\n                <Table sortByUP={sortByUP}\r\n                       sortByDown={sortByDown}\r\n                       tableElements={tableElements}/>\r\n                <Selects onChangedValue={onChangedValue}\r\n                         selected={selected}\r\n                         songs={songs}/>\r\n            </div>\r\n            <div className={s.paginatorContainer}>\r\n                <Pagination page={page}\r\n                            pageCount={pageCount}\r\n                            totalCount={totalCount}\r\n                            getPage={getPage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {songsReducer} from \"./songsReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    songsPage: songsReducer\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store\r\nwindow.store = store;\r\n","import React from 'react';\nimport s from'./App.module.css';\nimport {Main} from \"./components/Main\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction App() {\n    return (\n        <div className={s.app}>\n            <Provider store={store}>\n                <Main/>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}